{"name":"Cms explorer","tagline":"Simple web client for examining medicare and medicaid services","body":"# [CMS_Explorer] (http://mrubash1.com/cms_explorer)\r\n\r\n## Index\r\n1. [Introduction] (README.md#1-introduction)\r\n2. [Data Preparation] (README.md#2-data-preparation)\r\n3. [Flask Web Application] (README.md#3-flask-web-application)\r\n4. [Future Directions] (README.md#4-future-directions)\r\n\r\n![CMS Explorer] (flask/static/img/cms_explorer.png)\r\n![](https://github.com/mrubash1/cms_explorer/blob/master/flask/static/img/cms_explorer.png)\r\n## 1. Introduction\r\n[CMS_Explorer] (http://mrubash1.com/cms_explorer) is an analysis platform for research into financial relationships between physicians and the pharmaceutical industry. It is a data platform that is built on [MySQL] (https://www.mysql.com/), [Flask] (http://flask.pocoo.org/) and [Python] (https://www.python.org/); run on 1 [AWS T2micro] (http://aws.amazon.com/) with Linux Ubuntu. \r\n\r\n## 2. Data Preperation\r\n* Send Medicare/Medicaid raw CMS file (CSV format) to EC2 MySQL/web-host: OP_DTL_RSRCH_PGYR2014_P06302015.csv\r\n* Via scp copying: scp -o \"StrictHostKeyChecking no\" -i ~/.ssh/my-personal-key.pem ~/Desktop/OP_DTL_RSRCH_PGYR2014_P06302015.csv ubuntu@ec2-52-89-150-150.us-west-2.compute.amazonaws.com:~/cms_explorer\r\n* Change the permissions so it can be opened by mysql: chmod o+rx OP_DTL_RSRCH_PGYR2014_P06302015.csv\r\n* Make database: create databse grand_rounds;use grand_rounds\r\n* Clone into github repo: git clone https://github.com/mrubash1/cms_explorer\r\n* The following table is created by cms_explorer.py in the prepare_mysql_database folder\r\n* CREATE TABLE IF NOT EXISTS test (\r\n  ID BIGINT AUTO_INCREMENT NOT NULL,\r\n  Physician_Profile_ID BIGINT,\r\n  Physician_Full_Name VARCHAR(100),\r\n  Recipient_State VARCHAR(2),\r\n  Submitting_Applicable_Manufacturer_or_Applicable_GPO_Name VARCHAR(100),\r\n  Total_Amount_of_Payment_USDollars DECIMAL,\r\n  PRIMARY KEY (ID) \r\n  );\r\n\r\n![SCHEMA] (flask/static/img/sql_schema.png)\r\n![](https://github.com/mrubash1/cms_explorer/blob/master/flask/static/img/sql_schema.png)\r\n\r\n* ETL functions to load the data from the csv into table 6, keeping relevant columns only:\r\n  *Declare how the csv is formatted via: |fields terminated by ',' optionally enclosed by '\"' lines terminated by '\\n' '|\r\n  *Ignore the first line as we already constructed the header above\r\n  *For all columns that we are not keeping, use @ignore:\r\n    *|ignore 1 lines(\r\n      @ignore,\r\n      @ignore,\r\n      @ignore,\r\n      @ignore,\r\n      Physician_Profile_ID,\r\n      @var2,\r\n      @var3,\r\n      @var4,\r\n      @var1,\r\n      @ignore|\r\n      ...\r\n  * Construct an individual doctor's name by adding the first, middle and last name\r\n    * SET Physician_Full_Name = CONCAT(@var1, ' ', @var2 ,' ',@var3, ' ',@var4, ' ');\r\n\r\n* Query data by grouping doctors, and/or state and company by user request (default= 'All')\r\n* Importantly, doctors are identified by Physician_Profile_ID to avoid duplicate names\r\n* Additionally, some required data munging includes eliminating any entries that do not have the doctors name |HAVING Physician_Full_Name <> '   '|\r\n* Example query and results below:\r\n  |SELECT Physician_Full_Name AS Physician, \r\n  SUM(Total_Amount_of_Payment_USDollars) AS Received_the_following_money, \r\n  count(Total_Amount_of_Payment_USDollars) AS In_this_many_payments,\r\n  Submitting_Applicable_Manufacturer_or_Applicable_GPO_Name AS From_this_company,\r\n  Recipient_State AS In_the_state_of\r\n  FROM test6\r\n  WHERE Physician_Full_Name <> '   ' \r\n  AND Submitting_Applicable_Manufacturer_or_Applicable_GPO_Name = 'Genentech, Inc.'\r\n  AND Recipient_State = 'CA'\r\n  GROUP BY Physician_Profile_ID, Recipient_State, Submitting_Applicable_Manufacturer_or_Applicable_GPO_Name\r\n  ORDER BY SUM(Total_Amount_of_Payment_USDollars) DESC\r\n  LIMIT 20;|\r\n\r\n![Example Query] (flask/static/img/example_query.png)\r\n![](https://github.com/mrubash1/cms_explorer/blob/master/flask/static/img/example_query.png)\r\n\r\n## 3. Flask Web Application\r\n* The Flask application is written in python allowing querying of the MySQL database via custom connectors \r\n* Flask also enables dynamic loading of data and results into html tables\r\n* Scripts and templates can be found in the Flask folder\r\n* Example data results below\r\n\r\n![Example Data Results] (flask/static/img/data_results.png)\r\n![](https://github.com/mrubash1/cms_explorer/blob/master/flask/static/img/data_results.png)\r\n\r\n## 4. Future Directions\r\n* Linking this dataset with other measures of physician quality including insurance claims data and patient medicare claims data\r\n* Enable physician search functionality so individuals can examine the industry ties of their current or future potential physician\r\n* In the future, this platform could be implemented with the NoSQL database [Cassandra] (http://cassandra.apache.org/)\r\n  * Cassandra would enable rapid scaling to a distributed system format, with increased ability for concurrent writes (new data, user interactions), as well as concurrent reads (user based queries)\r\n  * Cassandra clusters are more reliable then traditional MySQL sharding strategies\r\n  * Additionally, with an informed partitioning strategy for physician and company based queries, key-value looks up could be increased in speed compared to MySQL (via column store disk storage)\r\n  * This strategy would be as follows\r\n    * Partition Key: Physician_Custom_ID\r\n    * Clustering Column: Company\r\n    * Unclustered column: State (with the drawback that joins across state based queries would be siginificantly slower)\r\n  * However there are drawbacks to Cassandra including\r\n    * Reduced flexibility in queries\r\n    * Difficulty in adding or removing a column\r\n    * Potential lack of consistency if a node goes down [CAP Theorem] (https://en.wikipedia.org/wiki/CAP_theorem)\r\n* Alternative distributed system databases that could also be implemented include [ElasticSearch](https://www.elastic.co/) for text searching via a reverse index strategy, or [Amazon Redshift] (https://aws.amazon.com/redshift/) for increased consistency in a distributed system.\r\n","google":"(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){                   (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),                   m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)                   })(window,document,'script','//www.google-analytics.com/analytics.js','ga');                   ga('create', 'UA-68928628-1', 'auto');                   ga('send', 'pageview');","note":"Don't delete this file! It's used internally to help with page regeneration."}